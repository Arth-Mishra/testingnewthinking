"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_node-wav_index_js"],{

/***/ "./node_modules/node-wav/index.js":
/*!****************************************!*\
  !*** ./node_modules/node-wav/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n\n\n\nconst data_decoders = {\n  pcm8: (buffer, offset, output, channels, samples) => {\n    let input = new Uint8Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let data = input[pos++] - 128;\n        output[ch][i] = data < 0 ? data / 128 : data / 127;\n      }\n    }\n  },\n  pcm16: (buffer, offset, output, channels, samples) => {\n    let input = new Int16Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let data = input[pos++];\n        output[ch][i] = data < 0 ? data / 32768 : data / 32767;\n      }\n    }\n  },\n  pcm24: (buffer, offset, output, channels, samples) => {\n    let input = new Uint8Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let x0 = input[pos++];\n        let x1 = input[pos++];\n        let x2 = input[pos++];\n        let xx = (x0 + (x1 << 8) + (x2 << 16));\n        let data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        output[ch][i] = data < 0 ? data / 8388608 : data / 8388607;\n      }\n    }\n  },\n  pcm32: (buffer, offset, output, channels, samples) => {\n    let input = new Int32Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let data = input[pos++];\n        output[ch][i] = data < 0 ? data / 2147483648 : data / 2147483647;\n      }\n    }\n  },\n  pcm32f: (buffer, offset, output, channels, samples) => {\n    let input = new Float32Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch)\n        output[ch][i] = input[pos++];\n    }\n  },\n  pcm64f: (buffer, offset, output, channels, samples) => {\n    let input = new Float64Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch)\n        output[ch][i] = input[pos++];\n    }\n  },\n};\n\nconst data_encoders = {\n  pcm8: (buffer, offset, input, channels, samples) => {\n    let output = new Uint8Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));\n        v = ((v * 0.5 + 0.5) * 255) | 0;\n        output[pos++] = v;\n      }\n    }\n  },\n  pcm16: (buffer, offset, input, channels, samples) => {\n    let output = new Int16Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));\n        v = ((v < 0) ? v * 32768 : v * 32767) | 0;\n        output[pos++] = v;\n      }\n    }\n  },\n  pcm24: (buffer, offset, input, channels, samples) => {\n    let output = new Uint8Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));\n        v = ((v < 0) ? 0x1000000 + v * 8388608 : v * 8388607) | 0;\n        output[pos++] = (v >> 0) & 0xff;\n        output[pos++] = (v >> 8) & 0xff;\n        output[pos++] = (v >> 16) & 0xff;\n      }\n    }\n  },\n  pcm32: (buffer, offset, input, channels, samples) => {\n    let output = new Int32Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));\n        v = ((v < 0) ? v * 2147483648 : v * 2147483647) | 0;\n        output[pos++] = v;\n      }\n    }\n  },\n  pcm32f: (buffer, offset, input, channels, samples) => {\n    let output = new Float32Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));        \n        output[pos++] = v;\n      }\n    }\n  },\n  pcm64f: (buffer, offset, input, channels, samples) => {\n    let output = new Float64Array(buffer, offset);\n    let pos = 0;\n    for (let i = 0; i < samples; ++i) {\n      for (let ch = 0; ch < channels; ++ch) {\n        let v = Math.max(-1, Math.min(input[ch][i], 1));        \n        output[pos++] = v;\n      }\n    }\n  },\n};\n\nfunction lookup(table, bitDepth, floatingPoint) {\n  let name = 'pcm' + bitDepth + (floatingPoint ? 'f' : '');\n  let fn = table[name];\n  if (!fn)\n    throw new TypeError('Unsupported data format: ' + name);\n  return fn;\n}\n\nfunction decode(buffer) {\n  let pos = 0, end = 0;\n  if (buffer.buffer) {\n    // If we are handed a typed array or a buffer, then we have to consider the\n    // offset and length into the underlying array buffer.\n    pos = buffer.byteOffset;\n    end = buffer.length;\n    buffer = buffer.buffer;\n  } else {\n    // If we are handed a straight up array buffer, start at offset 0 and use\n    // the full length of the buffer.\n    pos = 0;\n    end = buffer.byteLength;\n  }\n\n  let v = new DataView(buffer);\n\n  function u8() {\n    let x = v.getUint8(pos);\n    pos++;\n    return x;\n  }\n\n  function u16() {\n    let x = v.getUint16(pos, true);\n    pos += 2;\n    return x;\n  }\n\n  function u32() {\n    let x = v.getUint32(pos, true);\n    pos += 4;\n    return x;\n  }\n\n  function string(len) {\n    let str = '';\n    for (let i = 0; i < len; ++i)\n      str += String.fromCharCode(u8());\n    return str;\n  }\n\n  if (string(4) !== 'RIFF')\n    throw new TypeError('Invalid WAV file');\n  u32();\n  if (string(4) !== 'WAVE')\n    throw new TypeError('Invalid WAV file');\n\n  let fmt;\n  \n  while (pos < end) {\n    let type = string(4);\n    let size = u32();\n    let next = pos + size;\n    switch (type) {\n    case 'fmt ':\n      let formatId = u16();\n      if (formatId !== 0x0001 && formatId !== 0x0003)\n        throw new TypeError('Unsupported format in WAV file: ' + formatId.toString(16));\n      fmt = {\n        format: 'lpcm',\n        floatingPoint: formatId === 0x0003,\n        channels: u16(),\n        sampleRate: u32(),\n        byteRate: u32(),\n        blockSize: u16(),\n        bitDepth: u16(),\n      };\n      break;\n    case 'data':\n      if (!fmt)\n        throw new TypeError('Missing \"fmt \" chunk.');\n      let samples = Math.floor(size / fmt.blockSize);\n      let channels = fmt.channels;\n      let sampleRate = fmt.sampleRate;\n      let channelData = [];\n      for (let ch = 0; ch < channels; ++ch)\n        channelData[ch] = new Float32Array(samples);\n      lookup(data_decoders, fmt.bitDepth, fmt.floatingPoint)(buffer, pos, channelData, channels, samples);\n      return {\n        sampleRate: sampleRate,\n        channelData: channelData\n      };\n      break;\n    }\n    pos = next;\n  }\n}\n\nfunction encode(channelData, opts) {\n  let sampleRate = opts.sampleRate || 16000;\n  let floatingPoint = !!(opts.float || opts.floatingPoint);\n  let bitDepth = floatingPoint ? 32 : ((opts.bitDepth | 0) || 16);\n  let channels = channelData.length;\n  let samples = channelData[0].length;\n  let buffer = new ArrayBuffer(44 + (samples * channels * (bitDepth >> 3)));\n\n  let v = new DataView(buffer);\n  let pos = 0;\n\n  function u8(x) {\n    v.setUint8(pos++, x);\n  }\n\n  function u16(x) {\n    v.setUint16(pos, x, true);\n    pos += 2;\n  }\n\n  function u32(x) {\n    v.setUint32(pos, x, true);\n    pos += 4;\n  }\n  \n  function string(s) {\n    for (var i = 0; i < s.length; ++i)\n      u8(s.charCodeAt(i));\n  }\n\n  // write header\n  string('RIFF');\n  u32(buffer.byteLength - 8);\n  string('WAVE');\n\n  // write 'fmt ' chunk\n  string('fmt ');\n  u32(16);\n  u16(floatingPoint ? 0x0003 : 0x0001);\n  u16(channels);\n  u32(sampleRate);\n  u32(sampleRate * channels * (bitDepth >> 3));\n  u16(channels * (bitDepth >> 3));\n  u16(bitDepth);\n\n  // write 'data' chunk\n  string('data');\n  u32(buffer.byteLength - 44);\n  lookup(data_encoders, bitDepth, floatingPoint)(buffer, pos, channelData, channels, samples);\n\n  return Buffer(buffer);\n}\n\nmodule.exports = {\n  decode: decode,\n  encode: encode,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/node-wav/index.js\n"));

/***/ })

}]);